PRACTICAL 2 - KNN


AIM: To perform data pre-processing task and demonstrate classification algorithm of K Nearest Neighbours (KNN Classifier)for the given dataset.

KNN CLASSIFIER:
# 1 . using the actual dataset
#Display diabetes file
import pandas as pd
df = pd.read_csv('diabetes.csv')
df.head()
df.info()
df.isnull().sum()
df.shape


#do preprocessing  it is using the normalized data
from sklearn import preprocessing
x = df.values 
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
df_n1 = pd.DataFrame(x_scaled)
df_n1.head()


#create a dataframe with all training data except the target column  making model without normalized data
X = df.drop(columns=['Outcome'])
#check that the target variable has been removed
X.head()


#separate target values
y = df['Outcome'].values


#split the data question part is ‘X’ & answering part(testing) ‘Y’
from sklearn.model_selection import train_test_split

#split dataset into train and test data  (TRAINING DATA IS 80% AND DATA GIVING FOR TESTING IS 20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)


# For creating knn classifier import this
from sklearn.neighbors import KNeighborsClassifier
# Create KNN classifier (here we are giving the value of k as 3 )
knn = KNeighborsClassifier(n_neighbors = 3)

# Fit the classifier to the data (fit used for creating the model)
knn.fit(X_train,y_train)

#show first 5 model predictions on the test data (give only question)
#knn.predict(X_test)[0:5]
y_pred=knn.predict(X_test)


#check accuracy of our model on the test data
knn.score(X_test, y_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
#cm = confusion_matrix(y_test, knn.predict)
#ac = accuracy_score(y_test, knn.predict)
cm = confusion_matrix(y_test, y_pred)
ac = accuracy_score(y_test, y_pred)
print ("Confusion Matrix : \n", cm)
print ("Accuracy : ", ac)


# to plot accuracy 
import numpy as np
import matplotlib.pyplot as plt
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))
 
# Loop over K values
for i, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
     
    # Compute training and test data accuracy
    train_accuracy[i] = knn.score(X_train, y_train)
    test_accuracy[i] = knn.score(X_test, y_test)
# Generate plot
plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')
 
plt.legend()
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.show()
output: 



#split the data question part is ‘X’ & answering part(testing) ‘Y’  and random_state is used to make the accuracy constant
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=1)

# For creating knn classifier import this
from sklearn.neighbors import KNeighborsClassifier

# Create KNN classifier (here we are giving the value of k as 3 )
knn = KNeighborsClassifier(n_neighbors = 3)
# Fit the classifier to the data (fit used for creating the model)
knn.fit(X_train,y_train)

#show first 5 model predictions on the test data (give only question)
#knn.predict(X_test)[0:5]
y_pred=knn.predict(X_test)

#check accuracy of our model on the test data
knn.score(X_test, y_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
#cm = confusion_matrix(y_test, knn.predict)
#ac = accuracy_score(y_test, knn.predict)
cm = confusion_matrix(y_test, y_pred)
ac = accuracy_score(y_test, y_pred)
print ("Confusion Matrix : \n", cm)
print ("Accuracy : ", ac)


# to plot accuracy
import numpy as np
import matplotlib.pyplot as plt
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

# Loop over K values
for i, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)

    # Compute training and test data accuracy
    train_accuracy[i] = knn.score(X_train, y_train)
    test_accuracy[i] = knn.score(X_test, y_test)

# Generate plot
plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')

plt.legend()
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.show()


PART 2  

using normalized dataset  create the KNN model (everything same but just small change in assigning X and Y values)



#Display diabetes file
import pandas as pd
df = pd.read_csv('C:/Users/hetav/Downloads/diabetes.csv')
df.head()
df.info()
df.isnull().sum()
df.shape

#do preprocessing of data
from sklearn import preprocessing
x = df.values
min_max_scaler = preprocessing.MinMaxScaler() # initializing MinMaxScaler class
x_scaled = min_max_scaler.fit_transform(x) # fit_transform is a function of MinMaxScalar (it does scaling of data from 0 to 1 )
df_n1 = pd.DataFrame(x_scaled) # creating a dataframe df_n1 using pd.DataFrame function
df_n1.head()
#df.iloc[2]
#df_n1.iloc(1:7,2).values #to properly display the values
df_n1.iloc[1:7,[1,5,7]].values #1 to 6th records will be displayed along with specific column (1,5,7)
X=df_n1.iloc[:,0:8].values #will display all the records and columns
y=df_n1.iloc[:,-1].values
df_n1.head()

#split the data question part is ‘X’ & answering part(testing) ‘Y’
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=2)
# For creating knn classifier import this
from sklearn.neighbors import KNeighborsClassifier
# Create KNN classifier (here we are giving the value of k as 3 )
knn = KNeighborsClassifier(n_neighbors = 3)
# Fit the classifier to the data (fit used for creating the model)
knn.fit(X_train,y_train)


#show first 5 model predictions on the test data (give only question)
#knn.predict(X_test)[0:5]
y_pred=knn.predict(X_test)

#check accuracy of our model on the test data
knn.score(X_test, y_test)

# Making the Confusion Matrix  # in exam till here maam will ask
from sklearn.metrics import confusion_matrix, accuracy_score
#cm = confusion_matrix(y_test, knn.predict)
#ac = accuracy_score(y_test, knn.predict)
cm = confusion_matrix(y_test, y_pred)
ac = accuracy_score(y_test, y_pred)
print ("Confusion Matrix : \n", cm)
print ("Accuracy : ", ac)

if graph is same for both the above ways then your output is correct

# to plot accuracy
import numpy as np
import matplotlib.pyplot as plt
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

# Loop over K values
for i, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)

    # Compute training and test data accuracy
    train_accuracy[i] = knn.score(X_train, y_train)
    test_accuracy[i] = knn.score(X_test, y_test)

# Generate plot
plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')

plt.legend()
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.show()



PART 3 - To predict the model by giving a new input

#Display diabetes file
import pandas as pd
df = pd.read_csv('C:/Users/hetav/Downloads/diabetes.csv')
df.head()
df.info()
df.isnull().sum()
df.shape

#do preprocessing of data
from sklearn import preprocessing
x = df.values
min_max_scaler = preprocessing.MinMaxScaler() # initializing MinMaxScaler class
x_scaled = min_max_scaler.fit_transform(x) # fit_transform is a function of MinMaxScalar (it does scaling of data from 0 to 1 )
df_n1 = pd.DataFrame(x_scaled) # creating a dataframe df_n1 using pd.DataFrame function
df_n1.head()
#df.iloc[2]
#df_n1.iloc(1:7,2).values #to properly display the values
#df.iloc[1:7,[1,5,7]].values #1 to 6th records will be displayed along with specific column (1,5,7)
X=df.iloc[:,1:3].values #will display all the records and columns 1 and 2
y=df.iloc[:,-1].values
df.head()

#split the data question part is ‘X’ & answering part(testing) ‘Y’
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=2)
# For creating knn classifier import this
from sklearn.neighbors import KNeighborsClassifier
# Create KNN classifier (here we are giving the value of k as 3 )
knn = KNeighborsClassifier(n_neighbors = 3)
# Fit the classifier to the data (fit used for creating the model)
knn.fit(X_train,y_train)

#show first 5 model predictions on the test data (give only question)
#knn.predict(X_test)[0:5]
y_pred=knn.predict(X_test)
new=knn.predict([[120,80]])
print(new)
if new==0:
    print("Diabetes")
else:
    print("No Diabetes")

#check accuracy of our model on the test data
knn.score(X_test, y_test)

# Making the Confusion Matrix  # in exam till here maam will ask
from sklearn.metrics import confusion_matrix, accuracy_score
#cm = confusion_matrix(y_test, knn.predict)
#ac = accuracy_score(y_test, knn.predict)
cm = confusion_matrix(y_test, y_pred)
ac = accuracy_score(y_test, y_pred)
print ("Confusion Matrix : \n", cm)
print ("Accuracy : ", ac)

# to plot accuracy
import numpy as np
import matplotlib.pyplot as plt
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

# Loop over K values
for i, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)

    # Compute training and test data accuracy
    train_accuracy[i] = knn.score(X_train, y_train)
    test_accuracy[i] = knn.score(X_test, y_test)

# Generate plot
plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')

plt.legend()
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.show()


#Select the input columns as glucose and blood Pressure, Develop the decision tree Model
#Accept the value of Glucose and blood Pressure from the user
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score

df = pd.read_csv("C:/Users/Admin/Downloads/diabetes.csv")
X=df.iloc[:,[1,2]].values #will display all the records and columns
y=df.iloc[:,-1].values

X_train, X_test, y_train, y_test = train_test_split (X, y, test_size=0.3)
clf = DecisionTreeClassifier(criterion="entropy")
clf = clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)

new = clf.predict([[100,70]])
print(new)
if new == 0:
    print("Diabetes")
else:
    print("No Diabetes")

cm = confusion_matrix(y_test,y_pred)
print("Confusion Matrix: \n",cm)
print("Accuracy : \n",accuracy_score(y_test,y_pred))





